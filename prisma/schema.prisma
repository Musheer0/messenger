datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?   @default("https://www.freeiconspng.com/thumbs/profile-icon-png/profile-icon-9.png")
  password      String?
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  seenMessagesIds String[]  @db.ObjectId
  seenMessages    Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])

  sentMessages Message[]

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  sentFriendReqIds String[] @db.ObjectId
  sentFriendReq    Friend[] @relation("freindreq-sent")

  receivedFriendReqIds String[] @db.ObjectId
  receivedFriendReq    Friend[] @relation("freindreq-received")
}

model Friend {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  isAccepeted    Boolean  @default(false)
  senderId       String   @db.ObjectId
  receiverId     String   @db.ObjectId
  sender         User     @relation("freindreq-sent", references: [id], fields: [senderId])
  receiver       User     @relation("freindreq-received", references: [id], fields: [senderId])
  conversationId String
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean  @default(false)

  messageIds String[]  @db.ObjectId
  messages   Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  body           String?
  image          String?
  seenByIds      String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenByIds], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(references: [id], fields: [conversationId], onDelete: Cascade)
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
